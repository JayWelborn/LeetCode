class UnionFind:
    def __init__(self, n):
        self.root = list(range(n))
        self.rank = [1] * n
    
    def find(self, x):
        if self.root[x] != x:
            self.root[x] = self.find(self.root[x])
        return self.root[x]
    
    def union(self, x, y):
        root_x, root_y = self.find(x), self.find(y)
        # if we haven't recorded these are already in the same set, we need to union their two sets
        if root_x != root_y:
            if self.rank[root_x] > self.rank[root_y]:
                root_x, root_y = root_y, root_x
            self.rank[root_y] += self.rank[root_x]
            self.root[root_x] = root_y


class Solution:
    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:
        uf = UnionFind(n)

        for edge1, edge2 in edges:
            uf.union(edge1, edge2)
        
        return uf.find(source) == uf.find(destination)


class DFSSolution:
    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:
        graph = {}
        
        for v1, v2 in edges:
            if v1 in graph:
                graph[v1].add(v2)
            else:
                graph[v1] = {v2,}
            if v2 in graph:
                graph[v2].add(v1)
            else:
                graph[v2] = {v1,}

        visited = set()

        def traverse(source, destination):
            # Found our destination, return True
            if source == destination:
                return True
            
            # Already visited this node, return False
            if source in visited:
                return False
            
            # mark source visited since we've seen it now
            visited.add(source)

            # Now traverse through our neighbors
            neighbors = graph[source]
            for neighbor in neighbors:
                if traverse(neighbor, destination):
                    return True
                
            return False
        
        return traverse(source, destination)
